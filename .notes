// trader tournaments

- todo 

  - what do we need

    - metamask login detection state
    - react router
    - 
    - web3 
    - material ui
    - redux state tree
      - current product 
        - graph 
        - tournaments

FILE STRUCTURE 

src
  components
    App
    Navigation
    ProductSelection
    Graph
    Game
    GameList
    
  views / HOC injects logic into view component

    ProductSelection 
      - ProductSelection

    ProductSelected (get the state of the sleected asset factory, and games)
      - Graph
      - GameSelection / GameSelected
      
    GameList 
      - list of games
      - create games that add to list of games
    
    GameSelected
      - Game


PLANNING

  GameList
    - theres is static data
      - duration
      - prediction period 
      - resolution period 
      - cost to predict
      - name
      - asset
    - there is data that needs to be subscribed to
      - fee_collected x 
      - price_has_settled (dont need if we listen for price to finalize )
      - balance (is used for tournament creator and )
      - total predicted x
      - players total stake (contract doesnt support directly, but total player predictions x cost to predict ===)
      - positions () x 
      - all predicted prices x 
      - prediction_number (useless)
      - winning_prediction x
      - ETHUSD x & t
      - #winners 
    - there is data that determines state
      - before start
      - game start
      - game ended / resolution
      - resolution over
      - 
    - functionality to create a new game
    - 
      

    
  contract changes
    factory shouldnt have name option (just restrict creators)


  ONGOING todo
  - isLoading loads on first game instead of waiting
  - change subscribing to game state to only subscribe when a game is selected
  - styling 
    - need more intricate plans for styling 
    - Game 
      - predict 
      - claim winning prediction
      - collect winnings
      - positions
      - all predictions  
      - game state, 
        - countdowns
  - TESTING
    - test same predictionPrice counter, works
    -         

  - game.js 
    - if no predictions game doesnt load because of undefined

  - gamelist.js
    - create game needs to have a form for params...
    - if their are no games, it will display 'loading games' which is not true 
    - 
  
  - SelectedProduct
    - if no positions on ANY of the games, then my positions will not initially fire because games === undefined initally and num of positions never gets incremented....  
    



  - dont allow predict same twice?
  - confirmations on actions
    - loading animations
  - reload on game created>...? 
  - notes for the code to show function params etc 



    const handlePositions = () => {
      console.log(state)
      console.log('handling positions')
      // key is gameAddress, value is gameState
      if (state.games !== undefined || state.games !== null) {
        for (let [key, value] of Object.entries(state.games)) {
    
          let counter = 0;
          let playerPredictions = [];
          // predictions.price.count
          let predictions = {};
          // for each position
          value.positions.forEach(position => {       
            // get players positions     
            console.log(position.player === state.myAddress)
            console.log(state.myAddress)
            if (position.player === state.myAddress) {
              counter += 1;
              playerPredictions.push(position.predictionPrice)
              console.log(counter)              
            }
            // if prediction has been counted add to the count 
            let predictionKeys = Object.keys(predictions)
            if (predictionKeys.includes(position.predictionPrice) === true) {
              predictions[position.predictionPrice] += 1;
            } else {
              predictions[position.predictionPrice] = 1;
            }                        
          })
          setState(state => ({
            ...state,
            games: {
              ...state.games,
              [key]: {
                ...state.games[key],
                countedPredictions: predictions,
                myPositions: {
                  num: counter,
                  predictions: playerPredictions
                }
              }
            }
          }))
          
        }
      }
      
    }    

    handlePositions();  
